// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: shlink.proto

package shlink

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _shlink_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on ShortenRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ShortenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShortenRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ShortenRequestMultiError,
// or nil if none found.
func (m *ShortenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ShortenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if uri, err := url.Parse(m.GetUrl()); err != nil {
		err = ShortenRequestValidationError{
			field:  "Url",
			reason: "value must be a valid URI",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	} else if !uri.IsAbs() {
		err := ShortenRequestValidationError{
			field:  "Url",
			reason: "value must be absolute",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = ShortenRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ShortenRequestMultiError(errors)
	}

	return nil
}

func (m *ShortenRequest) _validateUuid(uuid string) error {
	if matched := _shlink_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ShortenRequestMultiError is an error wrapping multiple validation errors
// returned by ShortenRequest.ValidateAll() if the designated constraints
// aren't met.
type ShortenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShortenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShortenRequestMultiError) AllErrors() []error { return m }

// ShortenRequestValidationError is the validation error returned by
// ShortenRequest.Validate if the designated constraints aren't met.
type ShortenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShortenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShortenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShortenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShortenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShortenRequestValidationError) ErrorName() string { return "ShortenRequestValidationError" }

// Error satisfies the builtin error interface
func (e ShortenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShortenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShortenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShortenRequestValidationError{}

// Validate checks the field values on ShortenResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ShortenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShortenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShortenResponseMultiError, or nil if none found.
func (m *ShortenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ShortenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ShortUrl

	if len(errors) > 0 {
		return ShortenResponseMultiError(errors)
	}

	return nil
}

// ShortenResponseMultiError is an error wrapping multiple validation errors
// returned by ShortenResponse.ValidateAll() if the designated constraints
// aren't met.
type ShortenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShortenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShortenResponseMultiError) AllErrors() []error { return m }

// ShortenResponseValidationError is the validation error returned by
// ShortenResponse.Validate if the designated constraints aren't met.
type ShortenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShortenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShortenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShortenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShortenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShortenResponseValidationError) ErrorName() string { return "ShortenResponseValidationError" }

// Error satisfies the builtin error interface
func (e ShortenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShortenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShortenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShortenResponseValidationError{}

// Validate checks the field values on RedirectRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RedirectRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RedirectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RedirectRequestMultiError, or nil if none found.
func (m *RedirectRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RedirectRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetId()); l < 1 || l > 30 {
		err := RedirectRequestValidationError{
			field:  "Id",
			reason: "value length must be between 1 and 30 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RedirectRequestMultiError(errors)
	}

	return nil
}

// RedirectRequestMultiError is an error wrapping multiple validation errors
// returned by RedirectRequest.ValidateAll() if the designated constraints
// aren't met.
type RedirectRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RedirectRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RedirectRequestMultiError) AllErrors() []error { return m }

// RedirectRequestValidationError is the validation error returned by
// RedirectRequest.Validate if the designated constraints aren't met.
type RedirectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RedirectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RedirectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RedirectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RedirectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RedirectRequestValidationError) ErrorName() string { return "RedirectRequestValidationError" }

// Error satisfies the builtin error interface
func (e RedirectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRedirectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RedirectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RedirectRequestValidationError{}

// Validate checks the field values on RedirectResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RedirectResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RedirectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RedirectResponseMultiError, or nil if none found.
func (m *RedirectResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RedirectResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OriginalUrl

	if len(errors) > 0 {
		return RedirectResponseMultiError(errors)
	}

	return nil
}

// RedirectResponseMultiError is an error wrapping multiple validation errors
// returned by RedirectResponse.ValidateAll() if the designated constraints
// aren't met.
type RedirectResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RedirectResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RedirectResponseMultiError) AllErrors() []error { return m }

// RedirectResponseValidationError is the validation error returned by
// RedirectResponse.Validate if the designated constraints aren't met.
type RedirectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RedirectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RedirectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RedirectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RedirectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RedirectResponseValidationError) ErrorName() string { return "RedirectResponseValidationError" }

// Error satisfies the builtin error interface
func (e RedirectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRedirectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RedirectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RedirectResponseValidationError{}

// Validate checks the field values on ShortenJSONRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ShortenJSONRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShortenJSONRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShortenJSONRequestMultiError, or nil if none found.
func (m *ShortenJSONRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ShortenJSONRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if uri, err := url.Parse(m.GetUrl()); err != nil {
		err = ShortenJSONRequestValidationError{
			field:  "Url",
			reason: "value must be a valid URI",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	} else if !uri.IsAbs() {
		err := ShortenJSONRequestValidationError{
			field:  "Url",
			reason: "value must be absolute",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = ShortenJSONRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ShortenJSONRequestMultiError(errors)
	}

	return nil
}

func (m *ShortenJSONRequest) _validateUuid(uuid string) error {
	if matched := _shlink_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ShortenJSONRequestMultiError is an error wrapping multiple validation errors
// returned by ShortenJSONRequest.ValidateAll() if the designated constraints
// aren't met.
type ShortenJSONRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShortenJSONRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShortenJSONRequestMultiError) AllErrors() []error { return m }

// ShortenJSONRequestValidationError is the validation error returned by
// ShortenJSONRequest.Validate if the designated constraints aren't met.
type ShortenJSONRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShortenJSONRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShortenJSONRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShortenJSONRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShortenJSONRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShortenJSONRequestValidationError) ErrorName() string {
	return "ShortenJSONRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ShortenJSONRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShortenJSONRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShortenJSONRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShortenJSONRequestValidationError{}

// Validate checks the field values on ShortenJSONResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ShortenJSONResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShortenJSONResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShortenJSONResponseMultiError, or nil if none found.
func (m *ShortenJSONResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ShortenJSONResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ShortUrl

	if len(errors) > 0 {
		return ShortenJSONResponseMultiError(errors)
	}

	return nil
}

// ShortenJSONResponseMultiError is an error wrapping multiple validation
// errors returned by ShortenJSONResponse.ValidateAll() if the designated
// constraints aren't met.
type ShortenJSONResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShortenJSONResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShortenJSONResponseMultiError) AllErrors() []error { return m }

// ShortenJSONResponseValidationError is the validation error returned by
// ShortenJSONResponse.Validate if the designated constraints aren't met.
type ShortenJSONResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShortenJSONResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShortenJSONResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShortenJSONResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShortenJSONResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShortenJSONResponseValidationError) ErrorName() string {
	return "ShortenJSONResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ShortenJSONResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShortenJSONResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShortenJSONResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShortenJSONResponseValidationError{}

// Validate checks the field values on ShortenJSONBatchRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ShortenJSONBatchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShortenJSONBatchRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShortenJSONBatchRequestMultiError, or nil if none found.
func (m *ShortenJSONBatchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ShortenJSONBatchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetUrls()) < 1 {
		err := ShortenJSONBatchRequestValidationError{
			field:  "Urls",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetUrls() {
		_, _ = idx, item

		if uri, err := url.Parse(item); err != nil {
			err = ShortenJSONBatchRequestValidationError{
				field:  fmt.Sprintf("Urls[%v]", idx),
				reason: "value must be a valid URI",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else if !uri.IsAbs() {
			err := ShortenJSONBatchRequestValidationError{
				field:  fmt.Sprintf("Urls[%v]", idx),
				reason: "value must be absolute",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = ShortenJSONBatchRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ShortenJSONBatchRequestMultiError(errors)
	}

	return nil
}

func (m *ShortenJSONBatchRequest) _validateUuid(uuid string) error {
	if matched := _shlink_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ShortenJSONBatchRequestMultiError is an error wrapping multiple validation
// errors returned by ShortenJSONBatchRequest.ValidateAll() if the designated
// constraints aren't met.
type ShortenJSONBatchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShortenJSONBatchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShortenJSONBatchRequestMultiError) AllErrors() []error { return m }

// ShortenJSONBatchRequestValidationError is the validation error returned by
// ShortenJSONBatchRequest.Validate if the designated constraints aren't met.
type ShortenJSONBatchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShortenJSONBatchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShortenJSONBatchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShortenJSONBatchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShortenJSONBatchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShortenJSONBatchRequestValidationError) ErrorName() string {
	return "ShortenJSONBatchRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ShortenJSONBatchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShortenJSONBatchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShortenJSONBatchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShortenJSONBatchRequestValidationError{}

// Validate checks the field values on ShortenJSONBatchResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ShortenJSONBatchResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShortenJSONBatchResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShortenJSONBatchResponseMultiError, or nil if none found.
func (m *ShortenJSONBatchResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ShortenJSONBatchResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ShortenJSONBatchResponseMultiError(errors)
	}

	return nil
}

// ShortenJSONBatchResponseMultiError is an error wrapping multiple validation
// errors returned by ShortenJSONBatchResponse.ValidateAll() if the designated
// constraints aren't met.
type ShortenJSONBatchResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShortenJSONBatchResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShortenJSONBatchResponseMultiError) AllErrors() []error { return m }

// ShortenJSONBatchResponseValidationError is the validation error returned by
// ShortenJSONBatchResponse.Validate if the designated constraints aren't met.
type ShortenJSONBatchResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShortenJSONBatchResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShortenJSONBatchResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShortenJSONBatchResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShortenJSONBatchResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShortenJSONBatchResponseValidationError) ErrorName() string {
	return "ShortenJSONBatchResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ShortenJSONBatchResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShortenJSONBatchResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShortenJSONBatchResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShortenJSONBatchResponseValidationError{}

// Validate checks the field values on GetUserURLsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserURLsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserURLsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserURLsRequestMultiError, or nil if none found.
func (m *GetUserURLsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserURLsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = GetUserURLsRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetUserURLsRequestMultiError(errors)
	}

	return nil
}

func (m *GetUserURLsRequest) _validateUuid(uuid string) error {
	if matched := _shlink_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetUserURLsRequestMultiError is an error wrapping multiple validation errors
// returned by GetUserURLsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetUserURLsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserURLsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserURLsRequestMultiError) AllErrors() []error { return m }

// GetUserURLsRequestValidationError is the validation error returned by
// GetUserURLsRequest.Validate if the designated constraints aren't met.
type GetUserURLsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserURLsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserURLsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserURLsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserURLsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserURLsRequestValidationError) ErrorName() string {
	return "GetUserURLsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserURLsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserURLsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserURLsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserURLsRequestValidationError{}

// Validate checks the field values on GetUserURLsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserURLsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserURLsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserURLsResponseMultiError, or nil if none found.
func (m *GetUserURLsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserURLsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetUserURLsResponseMultiError(errors)
	}

	return nil
}

// GetUserURLsResponseMultiError is an error wrapping multiple validation
// errors returned by GetUserURLsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserURLsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserURLsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserURLsResponseMultiError) AllErrors() []error { return m }

// GetUserURLsResponseValidationError is the validation error returned by
// GetUserURLsResponse.Validate if the designated constraints aren't met.
type GetUserURLsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserURLsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserURLsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserURLsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserURLsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserURLsResponseValidationError) ErrorName() string {
	return "GetUserURLsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserURLsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserURLsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserURLsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserURLsResponseValidationError{}

// Validate checks the field values on DeleteUserURLsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserURLsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserURLsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserURLsRequestMultiError, or nil if none found.
func (m *DeleteUserURLsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserURLsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = DeleteUserURLsRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetUrls()) < 1 {
		err := DeleteUserURLsRequestValidationError{
			field:  "Urls",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetUrls() {
		_, _ = idx, item

		if utf8.RuneCountInString(item) < 1 {
			err := DeleteUserURLsRequestValidationError{
				field:  fmt.Sprintf("Urls[%v]", idx),
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return DeleteUserURLsRequestMultiError(errors)
	}

	return nil
}

func (m *DeleteUserURLsRequest) _validateUuid(uuid string) error {
	if matched := _shlink_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeleteUserURLsRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteUserURLsRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteUserURLsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserURLsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserURLsRequestMultiError) AllErrors() []error { return m }

// DeleteUserURLsRequestValidationError is the validation error returned by
// DeleteUserURLsRequest.Validate if the designated constraints aren't met.
type DeleteUserURLsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserURLsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserURLsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserURLsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserURLsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserURLsRequestValidationError) ErrorName() string {
	return "DeleteUserURLsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserURLsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserURLsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserURLsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserURLsRequestValidationError{}

// Validate checks the field values on DeleteUserURLsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserURLsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserURLsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserURLsResponseMultiError, or nil if none found.
func (m *DeleteUserURLsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserURLsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return DeleteUserURLsResponseMultiError(errors)
	}

	return nil
}

// DeleteUserURLsResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteUserURLsResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteUserURLsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserURLsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserURLsResponseMultiError) AllErrors() []error { return m }

// DeleteUserURLsResponseValidationError is the validation error returned by
// DeleteUserURLsResponse.Validate if the designated constraints aren't met.
type DeleteUserURLsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserURLsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserURLsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserURLsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserURLsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserURLsResponseValidationError) ErrorName() string {
	return "DeleteUserURLsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserURLsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserURLsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserURLsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserURLsResponseValidationError{}

// Validate checks the field values on PingRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PingRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PingRequestMultiError, or
// nil if none found.
func (m *PingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PingRequestMultiError(errors)
	}

	return nil
}

// PingRequestMultiError is an error wrapping multiple validation errors
// returned by PingRequest.ValidateAll() if the designated constraints aren't met.
type PingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PingRequestMultiError) AllErrors() []error { return m }

// PingRequestValidationError is the validation error returned by
// PingRequest.Validate if the designated constraints aren't met.
type PingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PingRequestValidationError) ErrorName() string { return "PingRequestValidationError" }

// Error satisfies the builtin error interface
func (e PingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PingRequestValidationError{}

// Validate checks the field values on PingResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PingResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PingResponseMultiError, or
// nil if none found.
func (m *PingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return PingResponseMultiError(errors)
	}

	return nil
}

// PingResponseMultiError is an error wrapping multiple validation errors
// returned by PingResponse.ValidateAll() if the designated constraints aren't met.
type PingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PingResponseMultiError) AllErrors() []error { return m }

// PingResponseValidationError is the validation error returned by
// PingResponse.Validate if the designated constraints aren't met.
type PingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PingResponseValidationError) ErrorName() string { return "PingResponseValidationError" }

// Error satisfies the builtin error interface
func (e PingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PingResponseValidationError{}

// Validate checks the field values on GetStatsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetStatsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStatsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStatsRequestMultiError, or nil if none found.
func (m *GetStatsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStatsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetStatsRequestMultiError(errors)
	}

	return nil
}

// GetStatsRequestMultiError is an error wrapping multiple validation errors
// returned by GetStatsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetStatsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStatsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStatsRequestMultiError) AllErrors() []error { return m }

// GetStatsRequestValidationError is the validation error returned by
// GetStatsRequest.Validate if the designated constraints aren't met.
type GetStatsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStatsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStatsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStatsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStatsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStatsRequestValidationError) ErrorName() string { return "GetStatsRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetStatsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStatsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStatsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStatsRequestValidationError{}

// Validate checks the field values on GetStatsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetStatsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStatsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStatsResponseMultiError, or nil if none found.
func (m *GetStatsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStatsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TotalUrls

	// no validation rules for TotalUsers

	if len(errors) > 0 {
		return GetStatsResponseMultiError(errors)
	}

	return nil
}

// GetStatsResponseMultiError is an error wrapping multiple validation errors
// returned by GetStatsResponse.ValidateAll() if the designated constraints
// aren't met.
type GetStatsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStatsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStatsResponseMultiError) AllErrors() []error { return m }

// GetStatsResponseValidationError is the validation error returned by
// GetStatsResponse.Validate if the designated constraints aren't met.
type GetStatsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStatsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStatsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStatsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStatsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStatsResponseValidationError) ErrorName() string { return "GetStatsResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetStatsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStatsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStatsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStatsResponseValidationError{}
