// Code generated by MockGen. DO NOT EDIT.
// Source: internal/interfaces/repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/interfaces/repository.go -destination=internal/repository/repository_mock.go -package=repository
//

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	model "github.com/GlebRadaev/shlink/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockIURLRepository is a mock of IURLRepository interface.
type MockIURLRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIURLRepositoryMockRecorder
	isgomock struct{}
}

// MockIURLRepositoryMockRecorder is the mock recorder for MockIURLRepository.
type MockIURLRepositoryMockRecorder struct {
	mock *MockIURLRepository
}

// NewMockIURLRepository creates a new mock instance.
func NewMockIURLRepository(ctrl *gomock.Controller) *MockIURLRepository {
	mock := &MockIURLRepository{ctrl: ctrl}
	mock.recorder = &MockIURLRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIURLRepository) EXPECT() *MockIURLRepositoryMockRecorder {
	return m.recorder
}

// FindByID mocks base method.
func (m *MockIURLRepository) FindByID(ctx context.Context, shortID string) (*model.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, shortID)
	ret0, _ := ret[0].(*model.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockIURLRepositoryMockRecorder) FindByID(ctx, shortID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockIURLRepository)(nil).FindByID), ctx, shortID)
}

// Insert mocks base method.
func (m *MockIURLRepository) Insert(ctx context.Context, url *model.URL) (*model.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, url)
	ret0, _ := ret[0].(*model.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockIURLRepositoryMockRecorder) Insert(ctx, url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockIURLRepository)(nil).Insert), ctx, url)
}

// List mocks base method.
func (m *MockIURLRepository) List(ctx context.Context) ([]*model.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]*model.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIURLRepositoryMockRecorder) List(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIURLRepository)(nil).List), ctx)
}
