// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/url/url.go
//
// Generated by this command:
//
//	mockgen -source=internal/service/url/url.go -destination=internal/service/url/url_mock.go -package=url
//

// Package url is a generated GoMock package.
package url

import (
	context "context"
	reflect "reflect"

	dto "github.com/GlebRadaev/shlink/internal/dto"
	taskmanager "github.com/GlebRadaev/shlink/internal/taskmanager"
	gomock "go.uber.org/mock/gomock"
)

// MockIURLService is a mock of IURLService interface.
type MockIURLService struct {
	ctrl     *gomock.Controller
	recorder *MockIURLServiceMockRecorder
	isgomock struct{}
}

// MockIURLServiceMockRecorder is the mock recorder for MockIURLService.
type MockIURLServiceMockRecorder struct {
	mock *MockIURLService
}

// NewMockIURLService creates a new mock instance.
func NewMockIURLService(ctrl *gomock.Controller) *MockIURLService {
	mock := &MockIURLService{ctrl: ctrl}
	mock.recorder = &MockIURLServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIURLService) EXPECT() *MockIURLServiceMockRecorder {
	return m.recorder
}

// DeleteUserURLs mocks base method.
func (m *MockIURLService) DeleteUserURLs(ctx context.Context, userID string, urls []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserURLs", ctx, userID, urls)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserURLs indicates an expected call of DeleteUserURLs.
func (mr *MockIURLServiceMockRecorder) DeleteUserURLs(ctx, userID, urls any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserURLs", reflect.TypeOf((*MockIURLService)(nil).DeleteUserURLs), ctx, userID, urls)
}

// GetOriginal mocks base method.
func (m *MockIURLService) GetOriginal(ctx context.Context, id string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOriginal", ctx, id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOriginal indicates an expected call of GetOriginal.
func (mr *MockIURLServiceMockRecorder) GetOriginal(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOriginal", reflect.TypeOf((*MockIURLService)(nil).GetOriginal), ctx, id)
}

// GetStats mocks base method.
func (m *MockIURLService) GetStats(ctx context.Context) (map[string]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStats", ctx)
	ret0, _ := ret[0].(map[string]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStats indicates an expected call of GetStats.
func (mr *MockIURLServiceMockRecorder) GetStats(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStats", reflect.TypeOf((*MockIURLService)(nil).GetStats), ctx)
}

// GetUserURLs mocks base method.
func (m *MockIURLService) GetUserURLs(ctx context.Context, userID string) (dto.GetUserURLsResponseDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserURLs", ctx, userID)
	ret0, _ := ret[0].(dto.GetUserURLsResponseDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserURLs indicates an expected call of GetUserURLs.
func (mr *MockIURLServiceMockRecorder) GetUserURLs(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserURLs", reflect.TypeOf((*MockIURLService)(nil).GetUserURLs), ctx, userID)
}

// IsAllowed mocks base method.
func (m *MockIURLService) IsAllowed(ip string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAllowed", ip)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAllowed indicates an expected call of IsAllowed.
func (mr *MockIURLServiceMockRecorder) IsAllowed(ip any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAllowed", reflect.TypeOf((*MockIURLService)(nil).IsAllowed), ip)
}

// LoadData mocks base method.
func (m *MockIURLService) LoadData(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadData", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadData indicates an expected call of LoadData.
func (mr *MockIURLServiceMockRecorder) LoadData(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadData", reflect.TypeOf((*MockIURLService)(nil).LoadData), ctx)
}

// ProcessDeleteURLsTask mocks base method.
func (m *MockIURLService) ProcessDeleteURLsTask(ctx context.Context, task taskmanager.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessDeleteURLsTask", ctx, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessDeleteURLsTask indicates an expected call of ProcessDeleteURLsTask.
func (mr *MockIURLServiceMockRecorder) ProcessDeleteURLsTask(ctx, task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessDeleteURLsTask", reflect.TypeOf((*MockIURLService)(nil).ProcessDeleteURLsTask), ctx, task)
}

// SaveData mocks base method.
func (m *MockIURLService) SaveData(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveData", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveData indicates an expected call of SaveData.
func (mr *MockIURLServiceMockRecorder) SaveData(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveData", reflect.TypeOf((*MockIURLService)(nil).SaveData), ctx)
}

// Shorten mocks base method.
func (m *MockIURLService) Shorten(ctx context.Context, userID, url string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shorten", ctx, userID, url)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Shorten indicates an expected call of Shorten.
func (mr *MockIURLServiceMockRecorder) Shorten(ctx, userID, url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shorten", reflect.TypeOf((*MockIURLService)(nil).Shorten), ctx, userID, url)
}

// ShortenList mocks base method.
func (m *MockIURLService) ShortenList(ctx context.Context, userID string, data dto.BatchShortenRequestDTO) (dto.BatchShortenResponseDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShortenList", ctx, userID, data)
	ret0, _ := ret[0].(dto.BatchShortenResponseDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShortenList indicates an expected call of ShortenList.
func (mr *MockIURLServiceMockRecorder) ShortenList(ctx, userID, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShortenList", reflect.TypeOf((*MockIURLService)(nil).ShortenList), ctx, userID, data)
}
