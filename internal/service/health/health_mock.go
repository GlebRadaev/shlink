// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/health/health.go
//
// Generated by this command:
//
//	mockgen -source=internal/service/health/health.go -destination=internal/service/health/health_mock.go -package=health
//

// Package health is a generated GoMock package.
package health

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIHealthService is a mock of IHealthService interface.
type MockIHealthService struct {
	ctrl     *gomock.Controller
	recorder *MockIHealthServiceMockRecorder
	isgomock struct{}
}

// MockIHealthServiceMockRecorder is the mock recorder for MockIHealthService.
type MockIHealthServiceMockRecorder struct {
	mock *MockIHealthService
}

// NewMockIHealthService creates a new mock instance.
func NewMockIHealthService(ctrl *gomock.Controller) *MockIHealthService {
	mock := &MockIHealthService{ctrl: ctrl}
	mock.recorder = &MockIHealthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIHealthService) EXPECT() *MockIHealthServiceMockRecorder {
	return m.recorder
}

// CheckDatabaseConnection mocks base method.
func (m *MockIHealthService) CheckDatabaseConnection(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckDatabaseConnection", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckDatabaseConnection indicates an expected call of CheckDatabaseConnection.
func (mr *MockIHealthServiceMockRecorder) CheckDatabaseConnection(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckDatabaseConnection", reflect.TypeOf((*MockIHealthService)(nil).CheckDatabaseConnection), ctx)
}
