// Code generated by MockGen. DO NOT EDIT.
// Source: internal/taskmanager/workerpool.go
//
// Generated by this command:
//
//	mockgen -source=internal/taskmanager/workerpool.go -destination=internal/taskmanager/workerpool_mock.go -package=taskmanager
//

// Package taskmanager is a generated GoMock package.
package taskmanager

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIWorkerPool is a mock of IWorkerPool interface.
type MockIWorkerPool struct {
	ctrl     *gomock.Controller
	recorder *MockIWorkerPoolMockRecorder
	isgomock struct{}
}

// MockIWorkerPoolMockRecorder is the mock recorder for MockIWorkerPool.
type MockIWorkerPoolMockRecorder struct {
	mock *MockIWorkerPool
}

// NewMockIWorkerPool creates a new mock instance.
func NewMockIWorkerPool(ctrl *gomock.Controller) *MockIWorkerPool {
	mock := &MockIWorkerPool{ctrl: ctrl}
	mock.recorder = &MockIWorkerPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIWorkerPool) EXPECT() *MockIWorkerPoolMockRecorder {
	return m.recorder
}

// Enqueue mocks base method.
func (m *MockIWorkerPool) Enqueue(ctx context.Context, task Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enqueue", ctx, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// Enqueue indicates an expected call of Enqueue.
func (mr *MockIWorkerPoolMockRecorder) Enqueue(ctx, task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enqueue", reflect.TypeOf((*MockIWorkerPool)(nil).Enqueue), ctx, task)
}

// RegisterHandler mocks base method.
func (m *MockIWorkerPool) RegisterHandler(taskType string, handler func(context.Context, Task) error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterHandler", taskType, handler)
}

// RegisterHandler indicates an expected call of RegisterHandler.
func (mr *MockIWorkerPoolMockRecorder) RegisterHandler(taskType, handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterHandler", reflect.TypeOf((*MockIWorkerPool)(nil).RegisterHandler), taskType, handler)
}

// Shutdown mocks base method.
func (m *MockIWorkerPool) Shutdown() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Shutdown")
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockIWorkerPoolMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockIWorkerPool)(nil).Shutdown))
}

// MockTask is a mock of Task interface.
type MockTask struct {
	ctrl     *gomock.Controller
	recorder *MockTaskMockRecorder
	isgomock struct{}
}

// MockTaskMockRecorder is the mock recorder for MockTask.
type MockTaskMockRecorder struct {
	mock *MockTask
}

// NewMockTask creates a new mock instance.
func NewMockTask(ctrl *gomock.Controller) *MockTask {
	mock := &MockTask{ctrl: ctrl}
	mock.recorder = &MockTaskMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTask) EXPECT() *MockTaskMockRecorder {
	return m.recorder
}

// TaskType mocks base method.
func (m *MockTask) TaskType() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TaskType")
	ret0, _ := ret[0].(string)
	return ret0
}

// TaskType indicates an expected call of TaskType.
func (mr *MockTaskMockRecorder) TaskType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TaskType", reflect.TypeOf((*MockTask)(nil).TaskType))
}
