package main

import (
	"bufio"
	"fmt"
	"io"
	"net/http"
	"os"
	"strings"
)

func main() {
	for {
		// –í–≤–æ–¥ –¥–ª–∏–Ω–Ω–æ–≥–æ URL –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		endpoint := "http://localhost:8080/"

		// –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª–∏
		fmt.Println("==========================================")
		fmt.Println("üåê –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–æ–∫—Ä–∞—â–∞—Ç–µ–ª—å URL")
		fmt.Println("==========================================")
		fmt.Println("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π:")
		fmt.Println("1Ô∏è‚É£  - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π URL: http://example.com")
		fmt.Println("2Ô∏è‚É£  - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π URL: http://invalid-url")
		fmt.Println("3Ô∏è‚É£  - –í–≤–µ—Å—Ç–∏ —Å–≤–æ–π URL")
		fmt.Println("4Ô∏è‚É£  - –í—ã—Ö–æ–¥")

		// –°—á–∏—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		scanner := bufio.NewScanner(os.Stdin)
		scanner.Scan() // —Å—á–∏—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä
		option := strings.TrimSpace(scanner.Text())

		if option == "4" {
			fmt.Println("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
			break
		}

		var longURL string

		switch option {
		case "1":
			longURL = "http://example.com" // –≤–∞–ª–∏–¥–Ω—ã–π URL –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
			fmt.Println("üîó –í—ã –≤—ã–±—Ä–∞–ª–∏ –≤–∞–ª–∏–¥–Ω—ã–π URL:", longURL)
		case "2":
			longURL = "http://invalid-url" // –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π URL –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
			fmt.Println("üö´ –í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π URL:", longURL)
		case "3":
			fmt.Print("–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω–Ω—ã–π URL: ")
			scanner.Scan() // —Å—á–∏—Ç—ã–≤–∞–µ–º URL
			longURL = strings.TrimSpace(scanner.Text())
			fmt.Println("üîó –í—ã –≤–≤–µ–ª–∏ URL:", longURL)
		default:
			fmt.Println("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
			return
		}
		fmt.Println("\n‚è≥ –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –≤–∞—à URL...")

		// –¥–æ–±–∞–≤–ª—è–µ–º HTTP-–∫–ª–∏–µ–Ω—Ç
		client := &http.Client{
			CheckRedirect: func(req *http.Request, via []*http.Request) error {
				return http.ErrUseLastResponse // –∑–∞–ø—Ä–µ—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤
			},
		}
		// –ø–∏—à–µ–º –∑–∞–ø—Ä–æ—Å
		req, err := http.NewRequest(http.MethodPost, endpoint, strings.NewReader(longURL))
		if err != nil {
			fmt.Println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:", err)
			return
		}
		// –£–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ Content-Type
		req.Header.Set("Content-Type", "text/plain")

		// –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
		resp, err := client.Do(req)
		if err != nil {
			fmt.Println("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:", err)
			return
		}
		defer resp.Body.Close()

		// –ß–∏—Ç–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π URL –∏–∑ –æ—Ç–≤–µ—Ç–∞
		responseBody, err := io.ReadAll(resp.Body)
		if err != nil {
			fmt.Println("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞:", err)
			return
		}

		if resp.StatusCode != http.StatusCreated {
			fmt.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è URL:\n%s\n%s\n", resp.Status, string(responseBody))
			return
		}

		shortURLStr := string(responseBody)
		fmt.Println("‚úÖ –ö–æ—Ä–æ—Ç–∫–∏–π URL: " + shortURLStr)

		// –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ª–∏–±–æ –Ω–∞–∂–∞—Ç—å Enter –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ URL, –ª–∏–±–æ –≤–≤–µ—Å—Ç–∏ —Å–≤–æ–π
		fmt.Print("\nüîÄ –ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –∫–æ—Ä–æ—Ç–∫–∏–π URL, –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π: ")
		scanner.Scan()
		userInput := strings.TrimSpace(scanner.Text())

		var id string
		if userInput == "" {
			// –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ Enter, –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ—Ä–æ—Ç–∫–∏–π URL
			parts := strings.Split(shortURLStr, "/")
			id = parts[len(parts)-1]
			fmt.Println("‚úîÔ∏è –í—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π URL:", shortURLStr)
		} else {
			// –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π URL, –±–µ—Ä–µ–º –µ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
			parts := strings.Split(userInput, "/")
			id = parts[len(parts)-1]
			fmt.Println("‚úîÔ∏è –í—ã –≤–≤–µ–ª–∏ —Å–≤–æ–π URL —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º:", id)
		}
		// –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
		redirectURL := "http://localhost:8080/" + id

		fmt.Println("\n‚è≥ –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –ø–æ –∫–æ—Ä–æ—Ç–∫–æ–º—É URL...")

		getReq, err := http.NewRequest(http.MethodGet, redirectURL, nil)
		if err != nil {
			fmt.Println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:", err)
			return
		}
		// –£–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ Content-Type
		getReq.Header.Set("Content-Type", "text/plain")

		// –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
		respGet, err := client.Do(getReq)
		if err != nil {
			fmt.Println("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:", err)
			return
		}
		defer respGet.Body.Close()

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
		if respGet.StatusCode == http.StatusTemporaryRedirect {
			// –ï—Å–ª–∏ –±—ã–ª —Ä–µ–¥–∏—Ä–µ–∫—Ç, –ø–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ "Location"
			originalURL := respGet.Header.Get("Location")
			if originalURL != "" {
				fmt.Println("‚úÖ –ò—Å—Ö–æ–¥–Ω—ã–π URL:", originalURL)
			} else {
				fmt.Println("‚ùå –ó–∞–≥–æ–ª–æ–≤–æ–∫ 'Location' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ")
			}
		} else {
			fmt.Println("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", respGet.Status)
		}

		fmt.Println("\nüéâ –ó–∞–≤–µ—Ä—à–µ–Ω–æ! –•–æ—Ç–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å? (–¥–∞/–Ω–µ—Ç): ")
		scanner.Scan()
		again := strings.TrimSpace(scanner.Text())
		if strings.ToLower(again) != "–¥–∞" {
			fmt.Println("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
			break
		}
	}
}
